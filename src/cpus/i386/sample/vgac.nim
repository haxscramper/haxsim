import
  commonh
type
  rgb_t* {.bycopy, importcpp.} = object
    red*: uint8
    green*: uint8
    blue*: uint8
  
var palette: array[256, rgb_t] = @([
                , 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x2a), 
                (0x00, 0x2a, 0x00), 
                (0x00, 0x2a, 0x2a), 
                (0x2a, 0x00, 0x00), 
                (0x2a, 0x00, 0x2a), 
                (0x2a, 0x15, 0x00), 
                (0x2a, 0x2a, 0x2a), 
                (0x15, 0x15, 0x15), 
                (0x15, 0x15, 0x3f), 
                (0x15, 0x3f, 0x15), 
                (0x15, 0x3f, 0x3f), 
                (0x3f, 0x15, 0x15), 
                (0x3f, 0x15, 0x3f), 
                (0x3f, 0x3f, 0x15), 
                (0x3f, 0x3f, 0x3f), 
                (0x00, 0x00, 0x00), 
                (0x05, 0x05, 0x05), 
                (0x08, 0x08, 0x08), 
                (0x0b, 0x0b, 0x0b), 
                (0x0e, 0x0e, 0x0e), 
                (0x11, 0x11, 0x11), 
                (0x14, 0x14, 0x14), 
                (0x18, 0x18, 0x18), 
                (0x1c, 0x1c, 0x1c), 
                (0x20, 0x20, 0x20), 
                (0x24, 0x24, 0x24), 
                (0x28, 0x28, 0x28), 
                (0x2d, 0x2d, 0x2d), 
                (0x32, 0x32, 0x32), 
                (0x38, 0x38, 0x38), 
                (0x3f, 0x3f, 0x3f), 
                (0x00, 0x00, 0x3f), 
                (0x10, 0x00, 0x3f), 
                (0x1f, 0x00, 0x3f), 
                (0x2f, 0x00, 0x3f), 
                (0x3f, 0x00, 0x3f), 
                (0x3f, 0x00, 0x2f), 
                (0x3f, 0x00, 0x1f), 
                (0x3f, 0x00, 0x10), 
                (0x3f, 0x00, 0x00), 
                (0x3f, 0x10, 0x00), 
                (0x3f, 0x1f, 0x00), 
                (0x3f, 0x2f, 0x00), 
                (0x3f, 0x3f, 0x00), 
                (0x2f, 0x3f, 0x00), 
                (0x1f, 0x3f, 0x00), 
                (0x10, 0x3f, 0x00), 
                (0x00, 0x3f, 0x00), 
                (0x00, 0x3f, 0x10), 
                (0x00, 0x3f, 0x1f), 
                (0x00, 0x3f, 0x2f), 
                (0x00, 0x3f, 0x3f), 
                (0x00, 0x2f, 0x3f), 
                (0x00, 0x1f, 0x3f), 
                (0x00, 0x10, 0x3f), 
                (0x1f, 0x1f, 0x3f), 
                (0x27, 0x1f, 0x3f), 
                (0x2f, 0x1f, 0x3f), 
                (0x37, 0x1f, 0x3f), 
                (0x3f, 0x1f, 0x3f), 
                (0x3f, 0x1f, 0x37), 
                (0x3f, 0x1f, 0x2f), 
                (0x3f, 0x1f, 0x27), 
                (0x3f, 0x1f, 0x1f), 
                (0x3f, 0x27, 0x1f), 
                (0x3f, 0x2f, 0x1f), 
                (0x3f, 0x37, 0x1f), 
                (0x3f, 0x3f, 0x1f), 
                (0x37, 0x3f, 0x1f), 
                (0x2f, 0x3f, 0x1f), 
                (0x27, 0x3f, 0x1f), 
                (0x1f, 0x3f, 0x1f), 
                (0x1f, 0x3f, 0x27), 
                (0x1f, 0x3f, 0x2f), 
                (0x1f, 0x3f, 0x37), 
                (0x1f, 0x3f, 0x3f), 
                (0x1f, 0x37, 0x3f), 
                (0x1f, 0x2f, 0x3f), 
                (0x1f, 0x27, 0x3f), 
                (0x2d, 0x2d, 0x3f), 
                (0x31, 0x2d, 0x3f), 
                (0x36, 0x2d, 0x3f), 
                (0x3a, 0x2d, 0x3f), 
                (0x3f, 0x2d, 0x3f), 
                (0x3f, 0x2d, 0x3a), 
                (0x3f, 0x2d, 0x36), 
                (0x3f, 0x2d, 0x31), 
                (0x3f, 0x2d, 0x2d), 
                (0x3f, 0x31, 0x2d), 
                (0x3f, 0x36, 0x2d), 
                (0x3f, 0x3a, 0x2d), 
                (0x3f, 0x3f, 0x2d), 
                (0x3a, 0x3f, 0x2d), 
                (0x36, 0x3f, 0x2d), 
                (0x31, 0x3f, 0x2d), 
                (0x2d, 0x3f, 0x2d), 
                (0x2d, 0x3f, 0x31), 
                (0x2d, 0x3f, 0x36), 
                (0x2d, 0x3f, 0x3a), 
                (0x2d, 0x3f, 0x3f), 
                (0x2d, 0x3a, 0x3f), 
                (0x2d, 0x36, 0x3f), 
                (0x2d, 0x31, 0x3f), 
                (0x00, 0x00, 0x1c), 
                (0x07, 0x00, 0x1c), 
                (0x0e, 0x00, 0x1c), 
                (0x15, 0x00, 0x1c), 
                (0x1c, 0x00, 0x1c), 
                (0x1c, 0x00, 0x15), 
                (0x1c, 0x00, 0x0e), 
                (0x1c, 0x00, 0x07), 
                (0x1c, 0x00, 0x00), 
                (0x1c, 0x07, 0x00), 
                (0x1c, 0x0e, 0x00), 
                (0x1c, 0x15, 0x00), 
                (0x1c, 0x1c, 0x00), 
                (0x15, 0x1c, 0x00), 
                (0x0e, 0x1c, 0x00), 
                (0x07, 0x1c, 0x00), 
                (0x00, 0x1c, 0x00), 
                (0x00, 0x1c, 0x07), 
                (0x00, 0x1c, 0x0e), 
                (0x00, 0x1c, 0x15), 
                (0x00, 0x1c, 0x1c), 
                (0x00, 0x15, 0x1c), 
                (0x00, 0x0e, 0x1c), 
                (0x00, 0x07, 0x1c), 
                (0x0e, 0x0e, 0x1c), 
                (0x11, 0x0e, 0x1c), 
                (0x15, 0x0e, 0x1c), 
                (0x18, 0x0e, 0x1c), 
                (0x1c, 0x0e, 0x1c), 
                (0x1c, 0x0e, 0x18), 
                (0x1c, 0x0e, 0x15), 
                (0x1c, 0x0e, 0x11), 
                (0x1c, 0x0e, 0x0e), 
                (0x1c, 0x11, 0x0e), 
                (0x1c, 0x15, 0x0e), 
                (0x1c, 0x18, 0x0e), 
                (0x1c, 0x1c, 0x0e), 
                (0x18, 0x1c, 0x0e), 
                (0x15, 0x1c, 0x0e), 
                (0x11, 0x1c, 0x0e), 
                (0x0e, 0x1c, 0x0e), 
                (0x0e, 0x1c, 0x11), 
                (0x0e, 0x1c, 0x15), 
                (0x0e, 0x1c, 0x18), 
                (0x0e, 0x1c, 0x1c), 
                (0x0e, 0x18, 0x1c), 
                (0x0e, 0x15, 0x1c), 
                (0x0e, 0x11, 0x1c), 
                (0x14, 0x14, 0x1c), 
                (0x16, 0x14, 0x1c), 
                (0x18, 0x14, 0x1c), 
                (0x1a, 0x14, 0x1c), 
                (0x1c, 0x14, 0x1c), 
                (0x1c, 0x14, 0x1a), 
                (0x1c, 0x14, 0x18), 
                (0x1c, 0x14, 0x16), 
                (0x1c, 0x14, 0x14), 
                (0x1c, 0x16, 0x14), 
                (0x1c, 0x18, 0x14), 
                (0x1c, 0x1a, 0x14), 
                (0x1c, 0x1c, 0x14), 
                (0x1a, 0x1c, 0x14), 
                (0x18, 0x1c, 0x14), 
                (0x16, 0x1c, 0x14), 
                (0x14, 0x1c, 0x14), 
                (0x14, 0x1c, 0x16), 
                (0x14, 0x1c, 0x18), 
                (0x14, 0x1c, 0x1a), 
                (0x14, 0x1c, 0x1c), 
                (0x14, 0x1a, 0x1c), 
                (0x14, 0x18, 0x1c), 
                (0x14, 0x16, 0x1c), 
                (0x00, 0x00, 0x10), 
                (0x04, 0x00, 0x10), 
                (0x08, 0x00, 0x10), 
                (0x0c, 0x00, 0x10), 
                (0x10, 0x00, 0x10), 
                (0x10, 0x00, 0x0c), 
                (0x10, 0x00, 0x08), 
                (0x10, 0x00, 0x04), 
                (0x10, 0x00, 0x00), 
                (0x10, 0x04, 0x00), 
                (0x10, 0x08, 0x00), 
                (0x10, 0x0c, 0x00), 
                (0x10, 0x10, 0x00), 
                (0x0c, 0x10, 0x00), 
                (0x08, 0x10, 0x00), 
                (0x04, 0x10, 0x00), 
                (0x00, 0x10, 0x00), 
                (0x00, 0x10, 0x04), 
                (0x00, 0x10, 0x08), 
                (0x00, 0x10, 0x0c), 
                (0x00, 0x10, 0x10), 
                (0x00, 0x0c, 0x10), 
                (0x00, 0x08, 0x10), 
                (0x00, 0x04, 0x10), 
                (0x08, 0x08, 0x10), 
                (0x0a, 0x08, 0x10), 
                (0x0c, 0x08, 0x10), 
                (0x0e, 0x08, 0x10), 
                (0x10, 0x08, 0x10), 
                (0x10, 0x08, 0x0e), 
                (0x10, 0x08, 0x0c), 
                (0x10, 0x08, 0x0a), 
                (0x10, 0x08, 0x08), 
                (0x10, 0x0a, 0x08), 
                (0x10, 0x0c, 0x08), 
                (0x10, 0x0e, 0x08), 
                (0x10, 0x10, 0x08), 
                (0x0e, 0x10, 0x08), 
                (0x0c, 0x10, 0x08), 
                (0x0a, 0x10, 0x08), 
                (0x08, 0x10, 0x08), 
                (0x08, 0x10, 0x0a), 
                (0x08, 0x10, 0x0c), 
                (0x08, 0x10, 0x0e), 
                (0x08, 0x10, 0x10), 
                (0x08, 0x0e, 0x10), 
                (0x08, 0x0c, 0x10), 
                (0x08, 0x0a, 0x10), 
                (0x0b, 0x0b, 0x10), 
                (0x0c, 0x0b, 0x10), 
                (0x0d, 0x0b, 0x10), 
                (0x0f, 0x0b, 0x10), 
                (0x10, 0x0b, 0x10), 
                (0x10, 0x0b, 0x0f), 
                (0x10, 0x0b, 0x0d), 
                (0x10, 0x0b, 0x0c), 
                (0x10, 0x0b, 0x0b), 
                (0x10, 0x0c, 0x0b), 
                (0x10, 0x0d, 0x0b), 
                (0x10, 0x0f, 0x0b), 
                (0x10, 0x10, 0x0b), 
                (0x0f, 0x10, 0x0b), 
                (0x0d, 0x10, 0x0b), 
                (0x0c, 0x10, 0x0b), 
                (0x0b, 0x10, 0x0b), 
                (0x0b, 0x10, 0x0c), 
                (0x0b, 0x10, 0x0d), 
                (0x0b, 0x10, 0x0f), 
                (0x0b, 0x10, 0x10), 
                (0x0b, 0x0f, 0x10), 
                (0x0b, 0x0d, 0x10), 
                (0x0b, 0x0c, 0x10), 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x00), 
                (0x00, 0x00, 0x00)
              ])
var cursor_y: uint16 = 0
var graphic: bool = false
proc _cli*(): void = 
  discard 

proc _sti*(): void = 
  discard 

proc out_port*(port: uint16, v: uint8): void = 
  discard 

proc gc_configure*(): void = 
  _cli()
  out_port(0x3ce, 0x6)
  out_port(0x3cf, 0x1)
  _sti()

proc dac_configure*(): void = 
  _cli()
  out_port(0x3c8, 0)
  for i in 0 ..< 0x100:
    out_port(0x3c9, palette[i].red)
    out_port(0x3c9, palette[i].green)
    out_port(0x3c9, palette[i].blue)
  _sti()

proc init_vga*(): void = 
  dac_configure()
  

proc scroll_page*(n: uint8): void = 
  var i: uint16
  var vram: ptr uint16 = cast[ptr uint16](0xb8000(
  block:
    i = 0
    while i < (0x19 - n) * 0x28:
      vram[i] = vram[n * 0x28 + i]
      postInc(i)
  while i < 0x19 * 0x28:
    vram[i] = 0x0700
    postInc(i)
  cursor_x = 0
  cursor_y = (cursor_y - n)

proc put_text*(s: ptr uint8): uint32 = 
  var i: uint16
  var vram: ptr uint16 = cast[ptr uint16](0xb8000(
  if graphic:
    return 0
  
  block:
    i = 0
    while s[i]:
      vram[cursor_y * 0x28 + cursor_x] = 0x0700 + s[i]
      postInc(cursor_x)
      if cursor_x >= 0x28 or not((s[i] xor 0x0a)):
        cursor_x = 0
        postInc(cursor_y)
      
      if cursor_y >= 0x19:
        scroll_page(1)
      
      postInc(i)
  return i

proc set_graphicmode*(): void = 
  graphic = true
  _cli()
  out_port(0x3c4, 2)
  out_port(0x3c5, 0x4)
  out_port(0x3c4, 4)
  out_port(0x3c5, 0x6)
  out_port(0x3ce, 5)
  out_port(0x3cf, 0x0)
  out_port(0x3ce, 6)
  out_port(0x3cf, 0x5)
  _sti()
